# running:
# sudo docker run -d --name gitlab-runner --restart always -u root -v /srv/gitlab-runner/config:/etc/gitlab-runner haskell-build-runner

# post install: add -fno-warn-tabs to .stack/programs/*/ghcjs-*/bin/ghcjs

################################################### initial image
FROM base/archlinux

# enable multilib
RUN /bin/echo -e '[multilib]\nInclude = /etc/pacman.d/mirrorlist\n' >> /etc/pacman.conf

# install packages stuff
RUN pacman -Syu --noconfirm
RUN yes | pacman -S gcc-multilib
RUN pacman -S --noconfirm \
	autoconf make alex happy git grep pkg-config stack sdl2 openal ffmpeg nasm automake nodejs npm sudo fakeroot patch pandoc vulkan-icd-loader \
	clang lib32-clang lib32-sdl2 zip emscripten python python2-virtualenv file which \
	apache-ant jdk8-openjdk lib32-alsa-lib lib32-openal lib32-libstdc++5 lib32-libxv lib32-mesa lib32-ncurses lib32-sdl lib32-zlib lib32-fontconfig lib32-libpulse swt \
	ansible rsync

# script for installing from AUR
COPY aur_install.sh /bin/aur_install.sh

# ncurses5-compat-libs
# using own copy of PKGBUILD as one on AUR is broken
#COPY ncurses5-compat-libs ncurses5-compat-libs
#RUN aur_install.sh ncurses5-compat-libs

# libtinfo from AUR
#RUN aur_install.sh libtinfo

TAG haskell-hacks-init:latest



################################################### build ghc
FROM haskell-hacks-init:latest

# install tools
RUN pacman -S --noconfirm --needed ghc-static

# get sources
RUN \
	git config --global url."git://github.com/ghc/packages-".insteadOf     git://github.com/ghc/packages/ && \
	git config --global url."http://github.com/ghc/packages-".insteadOf    http://github.com/ghc/packages/ && \
	git config --global url."https://github.com/ghc/packages-".insteadOf   https://github.com/ghc/packages/ && \
	git config --global url."ssh://git@github.com/ghc/packages-".insteadOf ssh://git@github.com/ghc/packages/ && \
	git config --global url."git@github.com:/ghc/packages-".insteadOf      git@github.com:/ghc/packages/ && \
	git clone https://github.com/ghc/ghc.git -b ghc-8.0.2-release --recursive

MOUNT .:/data

# configure and make
RUN cd ghc && \
	patch -p1 < /data/ghc.patch && \
	cp mk/build.mk{.sample,} && \
	./boot && \
	./configure && \
	make -j$(nproc) && \
	make binary-dist && \
	cd ..

RUN cp ghc/ghc-8.0.2-*.tar.xz /data/ghc-8.0.2-integersimple.tar.xz



################################################### make android ndk toolchain
#FROM haskell-hacks-init:latest

#MOUNT opt:/opt

# install android-ndk
#RUN aur_install.sh android-ndk

# make toolchain
#RUN /opt/android-ndk/build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-24 --stl=libc++ --install-dir=/opt/android-ndk-toolchain-arm

#MOUNT .:/data

# install SDL2 for android
#RUN /data/install-android-sdl2.sh



################################################### result image
FROM haskell-hacks-init:latest

MOUNT .:/data

# android ndk toolchain
#COPY android-ndk-toolchain-arm /opt/android-ndk-toolchain-arm

# install gitlab-ci-multi-runner
RUN curl -Lo /usr/bin/gitlab-ci-multi-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64 \
	&& chmod +x /usr/bin/gitlab-ci-multi-runner \
	&& useradd -m -s /bin/bash runner

# uglify-js
RUN npm install -g uglify-js
# minifyjs script
RUN /bin/echo -e '#!/bin/sh\nuglifyjs $1 --screw-ie8 --mangle --compress --wrap $1 --output $2' > /bin/minifyjs && chmod +x /bin/minifyjs

# rpm tools
#RUN aur_install.sh rpm-org && aur_install.sh rpmdevtools

# add local bin to profile
RUN /bin/echo -e '#!/bin/sh\nexport PATH=$PATH:$HOME/.local/bin' > /etc/profile.d/localbin.sh

# set locale (needed for GHC-8, also haddock)
RUN /bin/echo -e 'LANG=en_US.UTF-8\n' > /etc/locale.conf && \
	/bin/echo -e 'en_US.UTF-8 UTF-8\n' >> /etc/locale.gen && \
	locale-gen

# following installations doesn't require root
USER runner
WORKDIR /home/runner

# add config.yaml
RUN mkdir .stack && cp /data/config.yaml .stack/

# install ghc
RUN mkdir -p .stack/programs/x86_64-linux/place && \
	cd .stack/programs/x86_64-linux/place && \
	tar -xf /data/ghc-8.0.2-integersimple.tar.xz && \
	cd ghc-8.0.2 && \
	./configure --prefix=/home/runner/.stack/programs/x86_64-linux/ghc-ncurses6-nopie-8.0.2 && \
	make install && \
	echo installed > /home/runner/.stack/programs/x86_64-linux/ghc-ncurses6-nopie-8.0.2.installed && \
	cd ../.. && \
	rm -r place && \
	cd

# ghcjs is disabled temporarily (doesn't work with GHC 8 yet)

# install ghcjs
#COPY ghcjs-setup.yaml ghcjs-setup.yaml
#RUN stack setup --stack-yaml ghcjs-setup.yaml

# patch ghcjs script to add some options
#COPY ghcjs.patch ghcjs.patch
#RUN patch .stack/programs/x86_64-linux/ghcjs-0.2.0_ghc-8.0.1/bin/ghcjs < /data/ghcjs.patch

# create local bin
RUN mkdir -p /home/runner/.local/bin

# install hscolour for haddocks, and hlint
#RUN stack install hscolour hlint

# install butler
RUN curl -Lo /home/runner/.local/bin/butler https://dl.itch.ovh/butler/linux-amd64/head/butler \
	&& chmod +x /home/runner/.local/bin/butler

# install fpm
#RUN gem install --no-ri --no-rdoc -n /home/runner/.local/bin fpm

# finalize
CMD ["gitlab-ci-multi-runner", "run", "--user=runner", "--working-directory=/home/runner"]
VOLUME ["/etc/gitlab-runner"]

TAG haskell-build-runner:latest
